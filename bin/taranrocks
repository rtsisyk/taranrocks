#!/usr/bin/env taranscript

--------------------------------------------------------------------------------
--- TaranRocks - Tarantool Package Manager
--------------------------------------------------------------------------------
---
--- The script is a customized LuaRocks bundle made to work with Tarantool
---

if box == nil then
    io.stderr:write("Please use taranscript to run this file!", "\n")
    os.exit(1)
end

--
-- Override path to local configuration using LUAROCKS_CONFIG env variable
--
local ffi = require("ffi")
ffi.cdef([[
int setenv(const char *name, const char *value, int overwrite)
]])
local home_config_dir = os.getenv("HOME").. "/".. ".tarantool/rocks"
local home_config_file = home_config_dir .. "/" .. "config.lua"
ffi.C.setenv("LUAROCKS_CONFIG", home_config_file, 1)

--
-- Create default local configuration
--
local site_config = require("luarocks.site_config")
local f = io.open(home_config_file, "r")
if f == nil then
    os.execute([[mkdir -p "]]..home_config_dir:gsub([[\]], "/")..[["]])
    f = io.open(home_config_file, "w")
    f:write([[
rocks_servers = {
    ]].."[["..site_config.LUA_ROCKS_SERVER.."]]"..[[
}
]])
end
f:close()

--
-- Patch LuaRocks
--

local cfg = require("luarocks.cfg")

-- Override local tree
assert(cfg.home_tree ~= nil)
cfg.home_tree = string.gsub(cfg.home_tree, "luarocks", "tarantool")

-- Override lua_modules_path and lib_modules_path
cfg.lua_modules_path = site_config.LUA_MODULES_PATH
cfg.lib_modules_path = site_config.LIB_MODULES_PATH

-- Override built-in dependecies
cfg.rocks_provided.tarantool = box.info.version:match("(%d%.%d%.%d)")
cfg.rocks_provided.luajit = jit.version:match("LuaJIT (%d%.%d%.%d)")

-- Override versions
cfg.program_version = cfg.program_version .. " on Tarantool "..box.info.version
cfg.user_agent = cfg.user_agent.." on Tarantool "..box.info.version

-- Display nice application name
local program = arg[1]
local util = require('luarocks.util')
function util.this_program(default)
    return program
end

--
-- Run LuaRocks
--
local command_line = require("luarocks.command_line")

program_name = "taranrocks"
program_description = "Taranrocks command-line interface"

commands = {}
commands.help = require("luarocks.help")
commands.install = require("luarocks.install")
commands.search = require("luarocks.search")
commands.list = require("luarocks.list")
commands.remove = require("luarocks.remove")
commands.show = require("luarocks.show")

-- arg was saved by taranscript
table.remove(arg, 1) -- remove $0
command_line.run_command(unpack(arg))
